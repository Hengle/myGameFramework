//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Framework_LogColorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Framework.LogColor));
		L.RegVar("Non", get_Non, null);
		L.RegVar("Red", get_Red, null);
		L.RegVar("Green", get_Green, null);
		L.RegVar("Yellow", get_Yellow, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Framework.LogColor>.Check = CheckType;
		StackTraits<Framework.LogColor>.Push = Push;
	}

	static void Push(IntPtr L, Framework.LogColor arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Framework.LogColor), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Non(IntPtr L)
	{
		ToLua.Push(L, Framework.LogColor.Non);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Red(IntPtr L)
	{
		ToLua.Push(L, Framework.LogColor.Red);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Green(IntPtr L)
	{
		ToLua.Push(L, Framework.LogColor.Green);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Yellow(IntPtr L)
	{
		ToLua.Push(L, Framework.LogColor.Yellow);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Framework.LogColor o = (Framework.LogColor)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

